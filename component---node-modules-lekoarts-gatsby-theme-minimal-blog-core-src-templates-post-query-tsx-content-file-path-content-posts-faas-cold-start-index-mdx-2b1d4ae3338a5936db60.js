"use strict";(self.webpackChunkminimal_blog=self.webpackChunkminimal_blog||[]).push([[201],{892:function(e,n,t){t.r(n),t.d(n,{Head:function(){return s.F},default:function(){return l}});var a=t(7294),i=t(1151);function r(e){const n=Object.assign({p:"p",a:"a",br:"br",blockquote:"blockquote",h3:"h3",ol:"ol",li:"li"},(0,i.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.p,null,a.createElement(n.a,{href:"https://resume.oliverbennett.net"},"https://resume.oliverbennett.net"),a.createElement(n.br),"\n","I recently wrote AWS Lambda GET and PUT functions to count website visitors as part of the ",a.createElement(n.a,{href:"https://github.com/olibyte/cloud-resume-challenge"},"Cloud Resume Challenge"),". It wasn't long before I learnt about the concept of 'cold starts', and again came across them while reading Sam Newman's book \"Building Microservices\"."),"\n",a.createElement(n.blockquote,null,"\n",a.createElement(n.p,null,"It's important to address a concern that is often raised with FaaS, and that\nis the notion of spin-up time. Conceptually, functions are not running at all\nunless they are needed. This means they have to be launched to serve an\nincoming request. Now, for some runtimes, it takes a long time to spin up a new\nversion of the runtime—often called a “cold start” time. JVM and .NET runtimes\nsuffer a lot from this, so a cold start time for functions using these runtimes can\noften be significant.",a.createElement(n.br),"\n","In reality, though, these runtimes rarely cold start. On AWS at least, the runtimes\nare kept “warm,” so that requests that come in are served by already launched\nand running instances. This happens to such an extent that it can be difficult to\ngauge the impact of a “cold start” nowadays due to the optimizations being done\nunder the hood by the FaaS providers. Nonetheless, if this is a concern, sticking\nto languages whose runtimes have fast spin-up times (Go, Python, Node, and\nRuby come to mind) can sidestep this issue effectively. - Sam Newman (Building Microservices)"),"\n"),"\n",a.createElement(n.h3,null,"What Are Cold Starts?"),"\n",a.createElement(n.p,null,'Cold starts in AWS Lambda refer to the delay experienced when a new instance of a function is initialized for the first time or after a significant period of inactivity. During a cold start, Lambda provisions resources such as CPU, memory, and networking for the function, loads the runtime environment, and prepares it to execute your code. This initialization process can result in increased invocation times compared to "warm" or pre-initialized function instances.'),"\n",a.createElement(n.h3,null,"Why Do Cold Starts Occur?"),"\n",a.createElement(n.p,null,"Cold starts happen for several reasons, and understanding these factors is crucial to addressing and mitigating their impact:"),"\n",a.createElement(n.ol,null,"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,"Resource Provisioning: AWS Lambda dynamically allocates resources based on the configured function settings, such as memory allocation and concurrency. When a new instance is needed, it takes time to allocate these resources."),"\n"),"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,"Initialization Overhead: Lambda functions run within a containerized environment. When a container is created or reused for a new invocation, there's an overhead associated with loading the runtime, dependencies, and your code."),"\n"),"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,"Scaling and Concurrency: Lambda scales your functions automatically based on incoming traffic. During high traffic periods, new function instances might be created more frequently, leading to more cold starts."),"\n"),"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,"Inactivity Timeout: If a Lambda function is inactive for a certain period, AWS may deallocate the resources to save costs. Subsequent invocations after such deallocation will experience cold starts."),"\n"),"\n"),"\n",a.createElement(n.h3,null,"Mitigating Cold Starts"),"\n",a.createElement(n.p,null,"While you can't completely eliminate cold starts in AWS Lambda, you can take steps to minimize their impact:"),"\n",a.createElement(n.ol,null,"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,"Provision Adequate Memory: Increasing the memory allocated to your function can also increase the CPU allocated, which can reduce initialization time."),"\n"),"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,'Use Warmup Strategies: Implement a warmup mechanism by regularly invoking a dummy function or using AWS services like Amazon CloudWatch Events to keep your function "warm" and reduce cold start times.'),"\n"),"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,"Optimize Code and Dependencies: Minimize the size of your deployment package by removing unnecessary dependencies or using AWS Lambda Layers to separate large libraries from your function code."),"\n"),"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,"Leverage Provisioned Concurrency: AWS Lambda offers Provisioned Concurrency, which allows you to pre-warm function instances to reduce cold start latency."),"\n"),"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,"Adjust Timeout Settings: If possible, extend the timeout duration for your function to accommodate longer cold start times."),"\n"),"\n"),"\n",a.createElement(n.p,null,"Cold starts are an inherent aspect of serverless computing in AWS Lambda. While they can impact the performance of your functions, understanding why they occur and implementing mitigation strategies can help you deliver faster and more responsive serverless applications. By optimizing your code, leveraging AWS services, and configuring Lambda functions wisely, you can strike a balance between cost efficiency and performance in your serverless architecture."))}var o=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?a.createElement(n,e,a.createElement(r,e)):r(e)},s=t(7636);function l(e){return a.createElement(s.Z,e,a.createElement(o,e))}s.Z}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-faas-cold-start-index-mdx-2b1d4ae3338a5936db60.js.map
{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-husky-index-mdx-9af64dd767b1433e4803.js","mappings":"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","sources":["webpack://minimal-blog/./content/posts/husky/index.mdx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    br: \"br\",\n    h3: \"h3\",\n    ol: \"ol\",\n    li: \"li\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    h4: \"h4\",\n    ul: \"ul\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Git hooks are scripts that run automatically before or after certain Git events, such as committing or pushing changes to a repository.\", React.createElement(_components.br), \"\\n\", \"Husky simplifies the management of these hooks, making it easier for developers to enforce coding standards, run tests, and automate other tasks as part of their development workflow.\", React.createElement(_components.br), \"\\n\", \"Continuous integration and automated testing are essential for delivering high-quality web applications. Husky is often used to trigger test suites before pushing changes to a repository. This helps catch bugs early in the development process and ensures that new code doesn't break existing functionality.\", React.createElement(_components.br), \"\\n\", \"You can create custom hooks to automate any task that can be scripted. For example, you could set up a hook to generate documentation, minify CSS and JavaScript, or even deploy your application to a staging server whenever you push changes.\", React.createElement(_components.br), \"\\n\", \"Husky can be used to trigger code formatting and linting checks before a pull request is created. This ensures that the code submitted for review is clean and follows your project's guidelines, making code reviews smoother and more efficient.\"), \"\\n\", React.createElement(_components.h3, null, \"Use case: Using Husky to scan for sensitive information:\"), \"\\n\", React.createElement(_components.p, null, \"Husky can also be used to prevent developers from accidentally committing sensitive information, such as API keys, passwords, or private configuration files.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Install Husky and Lint-Staged:\")), \"\\n\", React.createElement(_components.p, null, \"First, make sure you have Husky and Lint-Staged installed as project dependencies:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"npm install husky lint-staged --save-dev\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Configure Husky:\")), \"\\n\", React.createElement(_components.p, null, \"In your project's \", React.createElement(_components.code, null, \"package.json\"), \" file, add a \", React.createElement(_components.code, null, \"husky\"), \" configuration section to specify the pre-commit hook:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-json\"\n  }, \"\\\"husky\\\": {\\n  \\\"hooks\\\": {\\n    \\\"pre-commit\\\": \\\"lint-staged\\\"\\n  }\\n}\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Configure Lint-Staged:\")), \"\\n\", React.createElement(_components.p, null, \"Create a configuration file named \", React.createElement(_components.code, null, \".lintstagedrc.json\"), \" in your project's root directory to define the tasks you want to run before committing. In this case, we'll use a custom script to scan for sensitive data:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-json\"\n  }, \"{\\n  \\\"*.js\\\": [\\n    \\\"check-sensitive-data\\\"\\n  ]\\n}\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Create a Custom Check Script:\")), \"\\n\", React.createElement(_components.p, null, \"Now, create a custom script (e.g., \", React.createElement(_components.code, null, \"check-sensitive-data.js\"), \") in your project's root directory to scan the staged files for sensitive data. Here's a simplified example using Node.js and regular expressions to search for a common pattern, such as \\\"API_KEY\\\":\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-javascript\"\n  }, \"const fs = require('fs');\\n\\n// Define the sensitive data patterns you want to check for\\nconst sensitivePatterns = [\\n  /API_KEY/g,  // Example: API_KEY=your-secret-key\\n  /PASSWORD/g  // Example: PASSWORD=your-password\\n];\\n\\n// Get the list of staged files from Lint-Staged\\nconst stagedFiles = process.argv.slice(2);\\n\\n// Iterate through staged files and check for sensitive data\\nstagedFiles.forEach((file) => {\\n  const content = fs.readFileSync(file, 'utf-8');\\n  for (const pattern of sensitivePatterns) {\\n    if (pattern.test(content)) {\\n      console.error(`Commit contains sensitive data in ${file}.`);\\n      console.error('Please remove or obfuscate the sensitive information before committing.');\\n      process.exit(1);\\n    }\\n  }\\n});\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Make the Check Script Executable:\")), \"\\n\", React.createElement(_components.p, null, \"Ensure that your custom check script is executable by running:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"chmod +x check-sensitive-data.js\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Commit Your Changes:\")), \"\\n\", React.createElement(_components.p, null, \"Now, when you try to commit changes to your repository, Husky will automatically run the pre-commit hook, which, in turn, will execute the \", React.createElement(_components.code, null, \"check-sensitive-data.js\"), \" script. If it detects any sensitive data patterns in the staged files, it will prevent the commit and display an error message.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Can't I just use Dependabot?\"), \"\\n\", React.createElement(_components.p, null, \"No, Husky and Dependabot are not the same tools, and they serve different purposes in the context of software development.\"), \"\\n\", React.createElement(_components.h4, null, \"Husky is a Git hook manager.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Purpose:\"), \" Its primary purpose is to manage Git hooks, which are scripts that run automatically before or after certain Git events, such as committing, pushing, merging, etc.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Use Cases:\"), \" Developers use Husky to automate tasks like code linting, running tests, ensuring coding standards, and other custom scripts as part of their Git workflow. It helps maintain code quality and consistency within a project.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Dependabot is a dependency management tool.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Purpose:\"), \" Its primary purpose is to help you keep your project's dependencies (libraries, packages, etc.) up to date. It scans your project's dependencies, checks for updates, and automatically creates pull requests to update them when new versions are available.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Use Cases:\"), \" Developers use Dependabot to ensure that their projects stay secure and up-to-date by automatically handling dependency updates, which can be critical for security vulnerabilities and keeping your project compatible with the latest versions of libraries and frameworks.\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/olibyte.github.io/olibyte.github.io/content/posts/husky/index.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","p","br","h3","ol","li","strong","pre","code","h4","ul","_provideComponents","components","React","className","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}
"use strict";(self.webpackChunkminimal_blog=self.webpackChunkminimal_blog||[]).push([[507],{6139:function(e,t,n){n.r(t),n.d(t,{Head:function(){return o.F},default:function(){return c}});var l=n(7294),i=n(1151);function r(e){const t=Object.assign({p:"p",h3:"h3",strong:"strong",ol:"ol",li:"li",pre:"pre",code:"code",ul:"ul"},(0,i.ah)(),e.components),{CodePen:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("CodePen",!0),l.createElement(l.Fragment,null,l.createElement(t.p,null,"Recently, I came across a scrollspy written in Vanilla JavaScript leveraging the Mutation Observer Web API. It looked like it hadn't been touched in a while, and was producing more than a few complaints in the console. I was tasked with resolving the console errors and refactoring the code, but I was soon scratching my head as to why a Mutation Observer was used in the first place."),"\n",l.createElement(t.h3,null,l.createElement(t.strong,null,"MutationObserver: Watching for DOM Changes")),"\n",l.createElement(t.p,null,"MutationObserver is a JavaScript API that allows developers to observe and react to changes in the DOM (Document Object Model). It was introduced to address the limitations of older techniques like the now-deprecated Mutation Events. MutationObserver is highly versatile and can be used to monitor changes such as:"),"\n",l.createElement(t.ol,null,"\n",l.createElement(t.li,null,l.createElement(t.strong,null,"Child List Changes"),": Detecting additions or removals of child elements within a DOM node."),"\n",l.createElement(t.li,null,l.createElement(t.strong,null,"Attributes Changes"),": Observing attribute modifications on DOM elements."),"\n",l.createElement(t.li,null,l.createElement(t.strong,null,"Character Data Changes"),": Monitoring changes to the character data of text nodes."),"\n"),"\n",l.createElement(t.p,null,"This makes MutationObserver a powerful tool for implementing real-time updates, dynamic content loading, and many other use cases where you need to track changes in the structure or content of your webpage."),"\n",l.createElement(t.p,null,"Here's a quick example of how MutationObserver works:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript"},"// Create a MutationObserver instance\nconst observer = new MutationObserver((mutationsList, observer) => {\n  for (const mutation of mutationsList) {\n    if (mutation.type === 'childList') {\n      console.log('Child nodes have changed!');\n    }\n  }\n});\n\n// Start observing changes in a specific DOM node\nobserver.observe(document.getElementById('target'), { childList: true });\n")),"\n",l.createElement(t.h3,null,l.createElement(t.strong,null,"IntersectionObserver: Keeping an Eye on Element Visibility")),"\n",l.createElement(t.p,null,"On the other hand, IntersectionObserver is designed to help developers monitor the visibility of DOM elements relative to a containing element or the viewport. This API is particularly handy when implementing lazy loading of images or infinite scrolling. IntersectionObserver allows you to determine when an element enters or exits the viewport, making it an excellent choice for optimizing website performance."),"\n",l.createElement(t.p,null,"Here's a simplified example of IntersectionObserver in action:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript"},"const observer = new IntersectionObserver((entries, observer) => {\n  for (const entry of entries) {\n    if (entry.isIntersecting) {\n      console.log('Element is in the viewport!');\n    } else {\n      console.log('Element is out of the viewport!');\n    }\n  }\n});\n\n// Start observing an element\nobserver.observe(document.getElementById('target'));\n")),"\n",l.createElement(t.h3,null,l.createElement(t.strong,null,"Choosing the Right Observer")),"\n",l.createElement(t.p,null,"So, when should you use MutationObserver, and when should you opt for IntersectionObserver? Here are some guidelines:"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"\n",l.createElement(t.p,null,l.createElement(t.strong,null,"Use MutationObserver")," when you need to track changes in the DOM structure or content, such as updating a chat interface or reacting to dynamic form submissions."),"\n"),"\n",l.createElement(t.li,null,"\n",l.createElement(t.p,null,l.createElement(t.strong,null,"Use IntersectionObserver")," when you want to enhance performance by loading resources like images or data only when they come into view, as in the case of infinite scrolling or lazy loading."),"\n"),"\n"),"\n",l.createElement(t.h3,null,"Observing an input field"),"\n",l.createElement(t.p,null,"In this example, two ",l.createElement(t.code,null,"div")," elements with distinct IDs, ",l.createElement(t.code,null,"changeable")," and ",l.createElement(t.code,null,"output"),". The ",l.createElement(t.code,null,"changeable")," div contains an input field, and the ",l.createElement(t.code,null,"output")," div displays the number of changes observed by the Mutation Observer."),"\n",l.createElement(n,{codePenId:"MWZpQRx"}),"\n",l.createElement(t.p,null,"Here's a breakdown of how this code works:"),"\n",l.createElement(t.ol,null,"\n",l.createElement(t.li,null,"\n",l.createElement(t.p,null,l.createElement(t.strong,null,"HTML Structure"),": Inside the ",l.createElement(t.code,null,"changeable")," div, there's an ",l.createElement(t.code,null,"<input>")," element with an ",l.createElement(t.code,null,"oninput")," attribute. This attribute specifies that whenever there's an input event (such as typing) in the input field, a JavaScript function will be executed. The function updates the text content of the ",l.createElement(t.code,null,"text")," div with the value entered into the input field."),"\n"),"\n",l.createElement(t.li,null,"\n",l.createElement(t.p,null,l.createElement(t.strong,null,"Mutation Observer Initialization"),": A ",l.createElement(t.code,null,"MutationObserver")," is created and assigned to the variable ",l.createElement(t.code,null,"ourObserver"),". This observer watches for changes in the DOM structure, specifically in the ",l.createElement(t.code,null,"#changeable")," element and its child nodes."),"\n"),"\n",l.createElement(t.li,null,"\n",l.createElement(t.p,null,l.createElement(t.strong,null,"Mutation Observer Configuration"),": The observer is configured with the following options:"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,l.createElement(t.code,null,"subtree: true"),": This option specifies that the observer should monitor changes not only in the direct children of ",l.createElement(t.code,null,"#changeable")," but also in their descendants (nested elements)."),"\n",l.createElement(t.li,null,l.createElement(t.code,null,"childList: true"),": This option indicates that the observer should track changes in the list of child nodes (elements) within ",l.createElement(t.code,null,"#changeable"),"."),"\n"),"\n"),"\n",l.createElement(t.li,null,"\n",l.createElement(t.p,null,l.createElement(t.strong,null,"Callback Function"),": The observer's callback function is executed whenever a change that matches the specified criteria is detected. In this case, each time the text in the ",l.createElement(t.code,null,"#text")," div within the ",l.createElement(t.code,null,"#changeable")," div is updated, the callback is triggered."),"\n"),"\n",l.createElement(t.li,null,"\n",l.createElement(t.p,null,l.createElement(t.strong,null,"Updating Output"),": Inside the callback function, a ",l.createElement(t.code,null,"count")," variable keeps track of the number of changes observed. It increments with each change detected, and the ",l.createElement(t.code,null,"textContent")," of the ",l.createElement(t.code,null,"#output")," div is updated to display the count."),"\n"),"\n"),"\n",l.createElement(t.p,null,"When you type in the input field within the ",l.createElement(t.code,null,"#changeable")," div, the Mutation Observer notices the changes in the DOM and updates the ",l.createElement(t.code,null,"#output")," div with the count of changes observed. This example showcases the power of Mutation Observers in monitoring and reacting to dynamic changes in web applications."),"\n",l.createElement(t.h3,null,"Scrollspy w/ Intersection Observer"),"\n",l.createElement(t.p,null,"In this code snippet, the Intersection Observer is used to implement a scrollspy feature. Scrollspy is a popular web design technique that highlights the navigation menu items as you scroll through different sections of a webpage. Here's how it works:"),"\n",l.createElement(n,{codePenId:"NWepyVz"}),"\n",l.createElement(t.ol,null,"\n",l.createElement(t.li,null,"\n",l.createElement(t.p,null,l.createElement(t.strong,null,"Intersection Observer Initialization"),": An ",l.createElement(t.code,null,"IntersectionObserver")," instance is created with the ",l.createElement(t.code,null,"intersectionCallback")," function as its callback. The observer is configured with various options, including a ",l.createElement(t.code,null,"threshold")," array, which defines the points at which the callback should be triggered as elements intersect the viewport."),"\n"),"\n",l.createElement(t.li,null,"\n",l.createElement(t.p,null,l.createElement(t.strong,null,"Callback Function"),": The ",l.createElement(t.code,null,"intersectionCallback")," function is executed whenever an observed element enters or exits the viewport. It checks the ",l.createElement(t.code,null,"intersectionRatio")," property of the observed entries to determine how much of an element is currently visible in the viewport."),"\n"),"\n",l.createElement(t.li,null,"\n",l.createElement(t.p,null,l.createElement(t.strong,null,"Activating Navigation Items"),": When an observed section enters the viewport with an ",l.createElement(t.code,null,"intersectionRatio")," greater than 0.75 (indicating that at least 75% of the section is visible), the ",l.createElement(t.code,null,"activateNavByIndex")," function is called. This function updates the active state of the navigation menu items based on the index of the currently visible section."),"\n"),"\n",l.createElement(t.li,null,"\n",l.createElement(t.p,null,l.createElement(t.strong,null,"Observing Sections"),": The ",l.createElement(t.code,null,"intersectionObserver")," is set up to observe each ",l.createElement(t.code,null,"section")," element on the page. As you scroll down or up, the Intersection Observer continuously tracks which section is in view and activates the corresponding navigation menu item."),"\n"),"\n"),"\n",l.createElement(t.p,null,"By combining the Intersection Observer with the provided HTML and CSS styles, this code creates a smooth scrollspy effect where the navigation menu items change their appearance to indicate which section of the page is currently in view, enhancing the user's browsing experience and providing clear navigation cues."),"\n",l.createElement(t.p,null,"Both MutationObserver and IntersectionObserver are valuable tools for web developers, each serving a distinct purpose. Understanding their capabilities and use cases can help you make informed decisions when designing and optimizing web applications. Incorporating these APIs into your development toolkit can lead to more responsive and efficient web experiences for your users."))}var a=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,i.ah)(),e.components);return t?l.createElement(t,e,l.createElement(r,e)):r(e)};var o=n(7636);function c(e){return l.createElement(o.Z,e,l.createElement(a,e))}o.Z}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-mutation-observer-intersection-observer-index-mdx-93c0d1e446080dfaf15d.js.map
{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-redux-index-mdx-482b58f977864032965a.js","mappings":"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","sources":["webpack://minimal-blog/./content/posts/redux/index.mdx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h3: \"h3\",\n    p: \"p\",\n    strong: \"strong\",\n    code: \"code\",\n    pre: \"pre\",\n    br: \"br\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h3, null, \"TLDR\"), \"\\n\", React.createElement(_components.p, null, \"If your app is data and react heavy, try redux for scalability\"), \"\\n\", React.createElement(_components.p, null, \"It took me a little while to get my head around, particularly as I was early on in my frontend journey, and yet to grasp the importance of building for scalability. Redux is a predictable state container for JavaScript applications. It provides a centralized store to manage the state of your application. This means that instead of scattering your data across multiple components, Redux keeps it in one place, making it easier to control, access, and modify.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Why Redux?\"), \"\\nRedux helps you \", React.createElement(_components.strong, null, \"manage the state\"), \" of your application. This is particularly beneficial in complex apps with multiple components that need to share and update data.\"), \"\\n\", React.createElement(_components.p, null, \"Redux enforces a \", React.createElement(_components.strong, null, \"strict unidirectional data flow\"), \", making it easier to understand how data changes propagate through your application. Actions are dispatched to modify the state, and reducers specify how these actions affect the state.\"), \"\\n\", React.createElement(_components.p, null, \"Redux's \", React.createElement(_components.strong, null, \"time-travel debugging\"), \" allows you to replay actions and inspect the state at any point in your application's history. This makes it easier to track down bugs and understand how your app reached its current state.\"), \"\\n\", React.createElement(_components.p, null, \"You can \", React.createElement(_components.strong, null, \"extend Redux functionality with middleware\"), \", allowing you to add features like logging, asynchronous operations, or API calls seamlessly.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Key Concepts in Redux:\"), \"\\nThe \", React.createElement(_components.strong, null, \"store\"), \" holds the entire state of your application. You can access and update the state only through the store's methods.\\n\", React.createElement(_components.strong, null, \"Actions\"), \" are plain JavaScript objects that describe changes in your application. They must have a \", React.createElement(_components.code, null, \"type\"), \" property and can carry additional data.\\n\", React.createElement(_components.strong, null, \"Reducers\"), \" specify how the state changes in response to actions. They are pure functions that take the current state and an action as input and return a new state.\\n\", React.createElement(_components.strong, null, \"Middleware\"), \" can intercept and modify actions before they reach the reducer. This is useful for handling asynchronous operations or adding custom behavior to your application.\"), \"\\n\", React.createElement(_components.h3, null, \"Use case: To-Do List\"), \"\\n\", React.createElement(_components.p, null, \"Certainly! Let's explore a real-life use case for Redux in a simple to-do list application. In this example, we'll demonstrate how Redux can be used to manage the state of the to-do items.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Use Case: To-Do List Application\")), \"\\n\", React.createElement(_components.p, null, \"Consider we're building a to-do list application in React, and you want to use Redux to manage the list of tasks. Here are the key components and code snippets:\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"1. Set up Redux:\")), \"\\n\", React.createElement(_components.p, null, \"First, you'll need to set up Redux in your project. Make sure you have the required dependencies installed (\", React.createElement(_components.code, null, \"redux\"), \" and \", React.createElement(_components.code, null, \"react-redux\"), \").\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"npm install redux react-redux\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"2. Create Actions:\")), \"\\n\", React.createElement(_components.p, null, \"Define actions that represent the operations you can perform on your to-do list. In this case, we'll have actions for adding and removing tasks.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-javascript\"\n  }, \"// actions.js\\nexport const ADD_TASK = 'ADD_TASK';\\nexport const REMOVE_TASK = 'REMOVE_TASK';\\n\\nexport const addTask = (task) => ({\\n  type: ADD_TASK,\\n  payload: task,\\n});\\n\\nexport const removeTask = (taskId) => ({\\n  type: REMOVE_TASK,\\n  payload: taskId,\\n});\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"3. Create Reducers:\")), \"\\n\", React.createElement(_components.p, null, \"Write reducers to specify how the state should change in response to actions.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-javascript\"\n  }, \"// reducers.js\\nimport { ADD_TASK, REMOVE_TASK } from './actions';\\n\\nconst initialState = {\\n  tasks: [],\\n};\\n\\nconst todoReducer = (state = initialState, action) => {\\n  switch (action.type) {\\n    case ADD_TASK:\\n      return {\\n        ...state,\\n        tasks: [...state.tasks, action.payload],\\n      };\\n    case REMOVE_TASK:\\n      return {\\n        ...state,\\n        tasks: state.tasks.filter((task) => task.id !== action.payload),\\n      };\\n    default:\\n      return state;\\n  }\\n};\\n\\nexport default todoReducer;\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"4. Create the Redux Store:\")), \"\\n\", React.createElement(_components.p, null, \"Initialize the Redux store, combining reducers and applying middleware if needed.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-javascript\"\n  }, \"// store.js\\nimport { createStore } from 'redux';\\nimport todoReducer from './reducers';\\n\\nconst store = createStore(todoReducer);\\n\\nexport default store;\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"5. Connect React Components:\")), \"\\n\", React.createElement(_components.p, null, \"In your React components, you can connect them to the Redux store using \", React.createElement(_components.code, null, \"react-redux\"), \"'s \", React.createElement(_components.code, null, \"connect\"), \" function.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-javascript\"\n  }, \"// TodoList.js\\nimport React from 'react';\\nimport { connect } from 'react-redux';\\nimport { addTask, removeTask } from './actions';\\n\\nclass TodoList extends React.Component {\\n  // ... component methods ...\\n\\n  render() {\\n    return (\\n      <div>\\n        <ul>\\n          {this.props.tasks.map((task) => (\\n            <li key={task.id}>\\n              {task.text}{' '}\\n              <button onClick={() => this.props.removeTask(task.id)}>\\n                Remove\\n              </button>\\n            </li>\\n          ))}\\n        </ul>\\n        <button onClick={() => this.props.addTask({ id: Date.now(), text: 'New Task' })}>\\n          Add Task\\n        </button>\\n      </div>\\n    );\\n  }\\n}\\n\\nconst mapStateToProps = (state) => ({\\n  tasks: state.tasks,\\n});\\n\\nconst mapDispatchToProps = {\\n  addTask,\\n  removeTask,\\n};\\n\\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList);\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"6. Initialize the App:\")), \"\\n\", React.createElement(_components.p, null, \"Finally, wrap your app with the Redux provider and provide the store.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-javascript\"\n  }, \"// App.js\\nimport React from 'react';\\nimport { Provider } from 'react-redux';\\nimport store from './store';\\nimport TodoList from './TodoList';\\n\\nfunction App() {\\n  return (\\n    <Provider store={store}>\\n      <div className=\\\"App\\\">\\n        <h1>Todo List</h1>\\n        <TodoList />\\n      </div>\\n    </Provider>\\n  );\\n}\\n\\nexport default App;\\n\")), \"\\n\", React.createElement(_components.p, null, \"There you have it - a basic to-do list app that uses Redux to manage the state of tasks. Actions and reducers handle adding and removing tasks, and the components are connected to the Redux store.\", React.createElement(_components.br), \"\\n\", \"Tl;dr Redux simplifies state management, even in a relatively small application, and can scale to handle more complex scenarios as your project grows.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/olibyte.github.io/olibyte.github.io/content/posts/redux/index.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h3","p","strong","code","pre","br","_provideComponents","components","React","className","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}